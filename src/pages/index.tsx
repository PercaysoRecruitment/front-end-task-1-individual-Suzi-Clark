import Head from 'next/head'
import GameBoard from '@/components/GameBoard'
import React from 'react'
import { useState, useEffect } from 'react'
import { gridArray, gridTuple } from '@/types'
import EndGame from '@/components/EndGame'

//PLAN
//Hold win, lose or game in progress state, render either GameBoard or EndGame depending on this
//Hold logic for figuring whether anyone has won yet
//Hold true/false boolean state for noughts or crosses next.
//Hold on Click logic function and pass down to GameButton via GameBoard (or could make customhook)
//onClick function: 
//1) puts an 0 or X on the button as text
//2) updates the state so the next click puts X in if 0 last time etc.
//3) updates a grid state with which button now has an X or 0
//4) disables the button after it has been clicked. 
// handleClick should just take (e: React.ClickEvent<HTMLInputElement>) as arg
//5) call the win checker function from index.

// EndGame rendered conditionally if win is true
type endConditions = 'Progress' | "X's Win!" | "0's Win!" | "It's a Draw!"

export default function Home() {
  const [win, setWin] = useState<endConditions>('Progress')
  const [noughtsNext, setNoughtsNext] = useState(true)
  const [grid, setGrid] = useState<gridArray>([' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' '])

  function handleClick(e: Event) {
    const target = e.target as HTMLButtonElement;
    if (target) {
      target.disabled = true;
      const gridIndex =  +(target.id);
      if (noughtsNext) {
        const newGrid: gridArray = [...grid.slice(0, gridIndex), '0', ...grid.slice(gridIndex + 1)]
        setGrid(newGrid)
      } else {
        const newGrid: gridArray = [...grid.slice(0, gridIndex), 'X', ...grid.slice(gridIndex + 1)]
        setGrid(newGrid)
      }
      setNoughtsNext(!noughtsNext);
    }
  }

  useEffect(() => {
    winCondition(grid);
  }, [grid])

  function checkWin(grid: gridArray, n: string): boolean {
    if ((grid[0] === n) && (grid[1] === n) && (grid[2] === n)) {
      return true;
    }
    else if ((grid[3] === n) && (grid[4] === n) && (grid[5] === n)) {
      return true;
    }
    else if ((grid[6] === n) && (grid[7] === n) && (grid[8] === n)) {
      return true;
    }
    else if ((grid[0] === n) && (grid[3] === n) && (grid[6] === n)) {
      return true;
    }
    else if ((grid[1] === n) && (grid[4] === n) && (grid[7] === n)) {
      return true;
    }
    else if ((grid[2] === n) && (grid[5] === n) && (grid[8] === n)) {
      return true;
    }
    else if ((grid[6] === n) && (grid[4] === n) && (grid[2] === n)) {
      return true;
    }
    else if ((grid[0] === n) && (grid[4] === n) && (grid[8] === n)) {
      return true;
    }
    else {
      return false;
    }
  }

  function winCondition(grid: gridArray): void {
    if (checkWin(grid, 'X')) {
      setWin("X's Win!");
    }
    else if (checkWin(grid, '0')) {
      setWin("0's Win!");
    }
    else if (!grid.includes(' ')) {
      console.log(grid);
      setWin("It's a Draw!");
    }
  }


  return (
    <>
      <Head>
        <title>Noughts & Crosses</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>     
          <h1>Noughts & Crosses</h1>
          {(win === 'Progress') ?
          (<GameBoard handleClick={handleClick} grid={grid}/>) :
          (<EndGame winner={win}/>)
          }
      </main>
    </>
  )
}
